// catalog.jsx
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { useDispatch, useSelector } from "react-redux";
import { setSearchTerm, clearSearchTerm } from "../store/slices/searchSlice";
import AddProductForm from './addproduct.jsx';
import EditProductForm from './editproduct.jsx';
import {
    useGetProductsQuery,
    useAddFavoriteMutation,
    useRemoveFavoriteMutation,
    useGetFavoritesQuery,
    useAddToCartMutation,
    useDeleteProductMutation,
    useGetCategoriesQuery,
    useUpdateProductMutation
} from '../store/slices/apiSlice.js';
import { setFavorites, addFavorite, removeFavorite } from '../store/slices/favoritesSlice';
import { addToCart } from '../store/slices/cartSlice';
import "./style.css";

function CatalogPage() {
    const dispatch = useDispatch();
    const searchTerm = useSelector((state) => state.search.searchTerm);
    const user = useSelector(state => state.auth.user);
    const [showForm, setShowForm] = useState(false);
    const [selectedCategory, setSelectedCategory] = useState(null);
    const [editingProduct, setEditingProduct] = useState(null);
    const [addFavoriteMutation] = useAddFavoriteMutation();
    const [removeFavoriteMutation] = useRemoveFavoriteMutation();
    const [addToCartMutation] = useAddToCartMutation();
    const [deleteProduct] = useDeleteProductMutation();
    const [updateProduct] = useUpdateProductMutation();
    const favorites = useSelector(state => state.favorites.items);
    const { data: favoritesData } = useGetFavoritesQuery(user?.user_id);
    const { data: categories = [] } = useGetCategoriesQuery();
    const { data: products = [], isLoading, isError } = useGetProductsQuery();

    useEffect(() => {
        if (favoritesData) {
            dispatch(setFavorites(favoritesData.map(item => item.product_id)));
        }
    }, [favoritesData, dispatch]);

    const filteredProducts = products.filter(product => {
        const matchesSearch = product.product_name.toLowerCase().includes(searchTerm.toLowerCase());
        const matchesCategory = !selectedCategory || product.category_id == selectedCategory;
        return matchesSearch && matchesCategory;
    });

    const handleFavorite = async (productId) => {
        if (!user) {
            alert('–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
            return;
        }

        try {
            const favoriteData = { user_id: user.user_id, product_id: productId };
            const isFavorite = favorites.includes(productId);

            if (isFavorite) {
                await removeFavoriteMutation(favoriteData).unwrap();
                dispatch(removeFavorite(productId));
            } else {
                await addFavoriteMutation(favoriteData).unwrap();
                dispatch(addFavorite(productId));
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º:', err);
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
        }
    };

    const handleAddToCart = async (product) => {
        if (!user) {
            alert('–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É');
            return;
        }

        try {
            await addToCartMutation({
                user_id: user.user_id,
                product_id: product.product_id,
                quantity_of_products: 1
            }).unwrap();
            dispatch(addToCart({ product, quantity: 1 }));
            alert('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É');
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É:', err);
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É');
        }
    };

    const handleDeleteProduct = async (productId) => {
        if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?')) {
            return;
        }

        try {
            await deleteProduct(productId).unwrap();
            alert('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', err);
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞');
        }
    };

    const handleUpdateProduct = async (productId, updatedData) => {
        try {
            await updateProduct({
                productId: productId,
                productData: updatedData
            }).unwrap();
            setEditingProduct(null);
            alert('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
            return true;
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞:', err);
            alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: ${err.data?.message || err.message}`);
            return false;
        }
    };

    if (isLoading) {
        return (
            <div className="loading-container" data-testid="loading-indicator">
                <div className="loader"></div>
                <p>–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã...</p>
            </div>
        );
    }

    if (isError) {
        return (
            <div className="error-container" data-testid="error-message">
                <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</h2>
                <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</p>
                <button className="retry-button">
                    –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </button>
            </div>
        );
    }

    return (
        <div className="catalog-page" data-testid="catalog-page">
            <header className="catalog-header">
                <div className="header-content">
                    <h1 className="catalog-title">TechStore</h1>
                    <p className="catalog-subtitle">–¢–µ—Ö–Ω–∏–∫–∞ –¥–ª—è –¥–æ–º–∞ –∏ –±–∏–∑–Ω–µ—Å–∞</p>
                </div>
            </header>

            <section className="hero-banner" aria-label="–†–µ–∫–ª–∞–º–Ω—ã–π –±–∞–Ω–Ω–µ—Ä">
                <div className="banner-content">
                    <h2>–õ—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤–∞—Å!</h2>
                    <p>–í—Å–µ –Ω–æ–≤–∏–Ω–∫–∏ –∏ –≥–æ—Ä—è—á–∏–µ —Å–∫–∏–¥–∫–∏ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫—É</p>
                </div>
            </section>

            <main className="catalog-main">
                {user && (
                    <div className="user-panel" data-testid="user-panel">
                        <div className="user-info">
                            <span className="user-name">{user.name}</span>
                            <span className="user-role">{user.role_id === 1 ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</span>
                        </div>
                        {Number(user.role_id) === 1 && (
                            <div className="admin-panel">
                                <button
                                    onClick={() => setShowForm(true)}
                                    className="admin-btn add-btn"
                                    aria-label="–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"
                                >
                                    <span>+</span> –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
                                </button>
                                <button
                                    onClick={() => {
                                        const productId = prompt('–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
                                        if (productId) {
                                            const productToEdit = products.find(p => p.product_id == productId);
                                            if (productToEdit) {
                                                setEditingProduct(productToEdit);
                                            } else {
                                                alert('–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
                                            }
                                        }
                                    }}
                                    className="admin-btn edit-btn"
                                    aria-label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä"
                                >
                                    ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                </button>
                                <button
                                    onClick={() => {
                                        const productId = prompt('–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:');
                                        if (productId) handleDeleteProduct(productId);
                                    }}
                                    className="admin-btn delete-btn"
                                    aria-label="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä"
                                >
                                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                                </button>
                            </div>
                        )}
                    </div>
                )}

                {showForm && user?.user_id && (
                    <AddProductForm
                        onCancel={() => setShowForm(false)}
                        userId={user.user_id}
                    />
                )}

                {editingProduct && (
                    <EditProductForm
                        product={editingProduct}
                        onCancel={() => setEditingProduct(null)}
                        onSave={handleUpdateProduct}
                        categories={categories}
                    />
                )}

                <div className="filter-panel">
                    <div className="search-box">
                        <input
                            type="text"
                            placeholder="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤..."
                            value={searchTerm}
                            onChange={(e) => dispatch(setSearchTerm(e.target.value))}
                            className="search-input"
                            aria-label="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤"
                        />
                        {searchTerm && (
                            <button
                                onClick={() => dispatch(clearSearchTerm())}
                                className="clear-search"
                                aria-label="–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫"
                            >
                                &times;
                            </button>
                        )}
                    </div>

                    <div className="category-selector">
                        <select
                            value={selectedCategory || ''}
                            onChange={(e) => setSelectedCategory(e.target.value || null)}
                            className="category-select"
                            aria-label="–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
                        >
                            <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                            {categories.map(category => (
                                <option key={category.category_id} value={category.category_id}>
                                    {category.category_name}
                                </option>
                            ))}
                        </select>
                    </div>
                </div>

                <div className="products-container">
                    {filteredProducts.length > 0 ? (
                        filteredProducts.map((product) => (
                            <div key={product.product_id} className="product-item" data-testid={`product-${product.product_id}`}>
                                <button
                                    className={`favorite-btn ${favorites.includes(product.product_id) ? 'active' : ''}`}
                                    onClick={() => handleFavorite(product.product_id)}
                                    title={favorites.includes(product.product_id) ? '–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' : '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'}
                                    aria-label={favorites.includes(product.product_id) ? '–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' : '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'}
                                >
                                    {favorites.includes(product.product_id) ? '‚ù§Ô∏è' : '‚ô°'}
                                </button>

                                <Link to={`/product/${product.product_id}`} className="product-link" aria-label={`–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ ${product.product_name}`}>
                                    <div className="product-image-wrapper">
                                        <img
                                            src={product.product_image || '/placeholder-image.jpg'}
                                            alt={product.product_name}
                                            className="product-img"
                                            onError={(e) => {
                                                e.target.src = '/placeholder-image.jpg';
                                            }}
                                            loading="lazy"
                                        />
                                    </div>
                                    <div className="product-details">
                                        <h3 className="product-name">{product.product_name}</h3>
                                        <p className="product-price">{product.price.toLocaleString()} ‚ÇΩ</p>
                                        {user?.role_id === 1 && (
                                            <p className="product-id">ID: {product.product_id}</p>
                                        )}
                                    </div>
                                </Link>

                                <button
                                    className="cart-btn"
                                    onClick={() => handleAddToCart(product)}
                                    aria-label={`–î–æ–±–∞–≤–∏—Ç—å ${product.product_name} –≤ –∫–æ—Ä–∑–∏–Ω—É`}
                                >
                                    –í –∫–æ—Ä–∑–∏–Ω—É
                                </button>
                            </div>
                        ))
                    ) : (
                        <div className="empty-state" data-testid="empty-state">
                            <div className="empty-icon">üîç</div>
                            <h3>–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                            <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</p>
                            <button
                                onClick={() => {
                                    dispatch(clearSearchTerm());
                                    setSelectedCategory(null);
                                }}
                                className="reset-btn"
                            >
                                –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
                            </button>
                        </div>
                    )}
                </div>
            </main>

            <footer className="catalog-footer">
                <p>¬© {new Date().getFullYear()} TechStore. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
            </footer>
        </div>
    );
}

export default CatalogPage;